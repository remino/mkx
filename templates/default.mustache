#!/usr/bin/env bash
# {{script_name}}

# Generated using mkx {{mkx_version}}: https://github.com/remino/mkx

VERSION='1.0.0'

{{script_name_sc}}_main() {
	trap _exit INT TERM

	E_ARGS=16

	SCRIPT_INV="$(basename "$0")"
	SCRIPT_PATH="$(readlink -f "$0")"
	SCRIPT_NAME="$(basename "$SCRIPT_PATH")"

	while getopts hv OPT; do
		case $OPT in
		h) CMD=help ;;
		v) CMD=version ;;
		*) _invalid_opt ;;
		esac
	done

	shift "$((OPTIND - 1))"

	# Comment out the following if you do not want to use commands:
	[ -z "$CMD" ] && CMD="$1"
	[ $# -gt 0 ] && shift

	[ -z "$CMD" ] && CMD="help"
	#[ -z "$CMD" ] && CMD="process"

	case "$CMD" in
	help | process | version) "{{script_name_sc_}}$CMD" "$@" ;;
	*) _invalid_cmd ;;
	esac

	_exit
}

{{script_name_sc}}_help() {
	cat <<USAGE
$SCRIPT_NAME $VERSION

USAGE: $SCRIPT_INV [<options>] <command> [<args>]

COMMANDS:

	help      Show this help screen.
	version   Show script name and version number.

OPTIONS:

	-h        Show this help screen.
	-v        Show script name and version number.

USAGE
}

{{script_name_sc}}_process() {
	true
}

{{script_name_sc}}_version() {
	_echo "$SCRIPT_NAME $VERSION"
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_exit() {
	exit_code=$?
	exit "$exit_code"
}

_fatal() {
	exit_code="$1"
	shift
	_error "$@"
	exit "$exit_code"
}

_invalid_cmd() {
	_error "Invalid command: $CMD"
	_echo
	{{script_name_sc}}_help
	exit "$E_ARGS"
}

_invalid_opt() {
	_error "Invalid option: $OPT"
	_echo
	{{script_name_sc}}_help
	exit "$E_ARGS"
}

{{script_name_sc}}_main "$@"
