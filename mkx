#!/usr/bin/env bash
# mkx
# Make new shell script executable file from template.

VERSION='3.0.0'

mkx_main() {
	trap _exit INT TERM

	E_ARGS=16
	E_EXISTS=17
	E_NO_TEMPLATE=18

	SCRIPT_PATH="$(readlink -f "$0")"
	SCRIPT_NAME="$(basename "$SCRIPT_PATH")"
	SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

	BARE=0
	INTERPRETER='/usr/bin/env bash'
	TEMPLATE_NAME='default'

	[ -z "$MKX_LIB_DIR" ] && MKX_LIB_DIR="$SCRIPT_DIR/lib"
	[ -z "$MKX_TEMPLATES_DIR" ] && MKX_TEMPLATES_DIR="$SCRIPT_DIR/templates"

	while getopts bhi:lst:v opt; do
		case $opt in
		b) BARE=1 ;;
		h) _help && return ;;
		i)
			BARE=1
			INTERPRETER="$OPTARG"
			;;
		s)
			BARE=1
			INTERPRETER="/bin/sh"
			;;
		t) TEMPLATE_NAME="$OPTARG" ;;
		v) _version && return ;;
		*) _invalid_opt ;;
		esac
	done

	shift "$((OPTIND - 1))"

	[ $# -lt 1 ] && _help && return 16

	NEW_SCRIPT="$1"

	shift

	if [ $BARE -eq 0 ]; then
		_template
	else
		_bare
	fi

	chmod a+x "$NEW_SCRIPT"
	_echo "$NEW_SCRIPT"
	_exit
}

_bare() {
	if [ ! -f "$NEW_SCRIPT" ]; then
		echo "#!$INTERPRETER" >"$NEW_SCRIPT"
		echo "" >>"$NEW_SCRIPT"
	fi

	[ -f "$NEW_SCRIPT" ] && chmod a+x "$NEW_SCRIPT"
}

_find_template() {
	template_name="$1"

	for filepath in \
		"$MKX_TEMPLATES_DIR/$template_name.mustache" \
		"${XDG_CONFIG_HOME:-$HOME/.config}/mkx/templates/$template_name.mustache"; do
		if [ -f "$filepath" ]; then
			echo "$filepath"
			return
		fi
	done
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_exit() {
	exit_code=$?
	exit $exit_code
}

_help() {
	cat <<USAGE
$SCRIPT_NAME $VERSION

USAGE: $SCRIPT_NAME [-bhsvx] [-i <interpreter>] [-t <template>] <scriptfile>

Make new shell script executable file from template.

OPTIONS:

	-b        Only write a bare script with only the shebang line, without template.
	          If output file already exists, make it executable.

	-h        Show this help screen.

	-i        Specify interpreter in shebang line. Implies -b.

	-s        Use /bin/sh as interpreter. Implies -b.

	-t        Specify template file. If not specified, uses 'default'.

	-v        Show script name and version number.

USAGE
}

_invalid_opt() {
	_error "Invalid option: $opt"
	_echo
	mkx_help
	exit $E_ARGS
}

_template() {
	new_script_name="$(basename "$NEW_SCRIPT")"
	new_script_name_sc="$(echo "$new_script_name" | sed 's/-/_/g')"
	template_file="$(_find_template "$TEMPLATE_NAME")"

	if [ -z "$template_file" ]; then
		_error "Template file not found: $template_file"
		return $E_NO_TEMPLATE
	fi

	if [ -f "$NEW_SCRIPT" ]; then
		_error "File already exists: $NEW_SCRIPT"
		return $E_EXISTS
	fi

	date="$(date +'%Y-%m-%d %H:%M:%S %Z')"

	(
		# shellcheck source=lib/mo
		source "$MKX_LIB_DIR/mo"

		export script_name="$new_script_name"
		export script_name_sc="$new_script_name_sc"
		export date="$date"
		export mkx_version="$VERSION"

		mo "$template_file" >"$NEW_SCRIPT"
	)
}

_version() {
	_echo "$SCRIPT_NAME $VERSION"
}

mkx_main "$@"
exit
