#!/usr/bin/env bash
# mkx
# Make new shell script executable file from template.

VERSION='3.1.2'

mkx_main() {
	trap _exit INT TERM

	E_ARGS=16
	E_EXISTS=17
	E_NO_TEMPLATE=18
	E_NO_MO_LIB=19

	SCRIPT_PATH="$(cd -- "$(dirname -- "$0")" && pwd -P)/$(basename -- "$0")"
	SCRIPT_NAME="$(basename "$SCRIPT_PATH")"
	SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

	CHMOD=0
	FORCE=0
	INTERPRETER='/usr/bin/env bash'
	TEMPLATE_NAME='default'

	: "${MKX_LIB_DIR:=$SCRIPT_DIR/lib}"
	: "${MKX_TEMPLATES_DIR:=}"

	[ $# -lt 1 ] && _help && return

	while getopts bfhi:lst:vx opt; do
		case $opt in
		b) TEMPLATE_NAME='bare' ;;
		f) FORCE=1 ;;
		h) _help && return ;;
		i)
			TEMPLATE_NAME='bare'
			INTERPRETER="$OPTARG"
			;;
		s)
			TEMPLATE_NAME='bare'
			INTERPRETER="/bin/sh"
			;;
		t) TEMPLATE_NAME="$OPTARG" ;;
		v) _version && return ;;
		x) CHMOD=1 ;;
		*) _invalid_opt ;;
		esac
	done

	shift "$((OPTIND - 1))"

	[ $# -lt 1 ] && _help && return 16

	NEW_SCRIPT="$1"

	shift

	if [ $CHMOD -ne 0 ]; then
		if [ -f "$NEW_SCRIPT" ]; then
			_echo "Making file executable: $NEW_SCRIPT"
			_chmod "$NEW_SCRIPT"
		else
			_fatal $E_EXISTS "File does not exist: $NEW_SCRIPT"
		fi
		return
	fi

	_template

	_chmod "$NEW_SCRIPT"
	_echo "$NEW_SCRIPT"
	_exit
}

_find_mo() {
	for filepath in \
		"$MKX_LIB_DIR/mo" \
		"$(dirname "$SCRIPT_DIR")/lib/mo"; do
		if [ -x "$filepath" ]; then
			echo "$filepath"
			return
		fi
	done
}

_find_template() {
	template_name="$1"

	for filepath in \
		"$MKX_TEMPLATES_DIR/$template_name.mustache" \
		"$SCRIPT_DIR/templates/$template_name.mustache" \
		"$(dirname "$SCRIPT_DIR")/share/$SCRIPT_NAME/templates/$template_name.mustache" \
		"${XDG_CONFIG_HOME:-$HOME/.config}/mkx/templates/$template_name.mustache" \
		"$1"; do
		if [ -f "$filepath" ]; then
			echo "$filepath"
			return
		fi
	done
}

_chmod() {
	chmod a+x "$1"
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_exit() {
	local status=$?
	exit "${1:-$status}"
}

_fatal() {
	exit_code="$1"
	shift
	_error "$@"
	_exit "$exit_code"
}

_help() {
	cat <<USAGE
$SCRIPT_NAME $VERSION

USAGE: $SCRIPT_NAME [-bhsvx] [-i <interpreter>] [-t <template>] <scriptfile>

Make new executable shell script file from template.

OPTIONS:

	-b        Only write a bare script with only the shebang line, without template.

	-f        Force output file override.

	-h        Show this help screen.

	-i        Specify interpreter in shebang line. Implies -b if -t is not specified.

	-s        Use /bin/sh as interpreter, like '-i /bin/sh'.

	-t        Specify template file. If not specified, uses 'default'.

	-v        Show script name and version number.

	-x        Make existing file executable without writing anything.

USAGE
}

_invalid_opt() {
	_error "Invalid option: $opt"
	_help
	exit $E_ARGS
}

_template() {
	interpreter="$INTERPRETER"
	new_script_name="$(basename "$NEW_SCRIPT")"
	new_script_name_sc="$(echo "$new_script_name" | sed 's/-/_/g')"
	template_file="$(_find_template "$TEMPLATE_NAME")"

	if [ -z "$template_file" ]; then
		_fatal $E_NO_TEMPLATE "Template file not found: $TEMPLATE_NAME"
	fi

	if [ -f "$NEW_SCRIPT" ]; then
		_echo "Making file executable: $NEW_SCRIPT"
	fi

	date="$(date +'%Y-%m-%d %H:%M:%S %Z')"

	local mo="$(_find_mo)"
	[ -z "$mo" ] && _fatal $E_NO_MO_LIB "No mustache (mo) script found."

	if [ -f "$NEW_SCRIPT" ] && [ $FORCE -eq 0 ]; then
		printf "File exists. Override? [y/N] "
		read -n 1 -r reply
		echo

		if [[ "$reply" =~ ^[Yy]$ ]]; then
			echo "Overwriting..."
		else
			echo "Cancelled."
		fi
	fi

	(
		# shellcheck source=lib/mo
		source "$mo"

		export script_name="$new_script_name"
		export script_name_sc="$new_script_name_sc"
		export date="$date"
		export mkx_version="$VERSION"

		mo "$template_file" >"$NEW_SCRIPT"
	)
}

_version() {
	_echo "$SCRIPT_NAME $VERSION"
}

mkx_main "$@"
exit
