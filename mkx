#!/bin/sh
# mkx
# Make new shell script executable file from template.

VERSION='2.2.0'

mkx_main() {
	trap _exit INT TERM

	E_ARGS=16
	E_EXISTS=17

	SCRIPT_PATH="$( readlink -f "$0" )"
	SCRIPT_NAME="$( basename "$SCRIPT_PATH" )"

	BARE=0
	INTERPRETER='/bin/sh'

	while getopts bhi:v opt
	do
		case $opt in
			b) BARE=1 ;;
			h) mkx_help && return ;;
			i) BARE=1; INTERPRETER="$OPTARG" ;;
			v) mkx_version && return ;;
			*) _invalid_opt ;;
		esac
	done

	shift "$(( OPTIND - 1 ))"

	[ $# -lt 1 ] && mkx_help && return 16

	NEW_SCRIPT="$1"

	shift

	if [ $BARE -eq 0 ]
	then
		mkx_template
	else
		mkx_bare
	fi

	chmod a+x "$NEW_SCRIPT"
	_echo "$NEW_SCRIPT"
	_exit
}

mkx_bare() {
	if [ ! -f "$NEW_SCRIPT" ]
	then
		echo "#!$INTERPRETER" > "$NEW_SCRIPT"
		echo "" >> "$NEW_SCRIPT"
	fi

	[ -f "$NEW_SCRIPT" ] && chmod a+x "$NEW_SCRIPT"
}

mkx_help() {
cat <<USAGE
$SCRIPT_NAME $VERSION

USAGE: $SCRIPT_NAME [-bhvx] [-i interpreter] scriptfile

Make new shell script executable file from template.

OPTIONS:

	-b        Only write a bare script with only the shebang line, without template.
	          If output file already exists, make it executable.
	          Implied when called script is invoked as 'mkx'.

	-h        Show this help screen.

	-i        Specify interpreter in shebang line. Implies -b.

	-v        Show script name and version number.

USAGE
}

mkx_template() {
	new_script_name="$( basename "$NEW_SCRIPT" )"
	new_script_name_sc="$( echo "$new_script_name" | sed 's/-/_/g' )"

	if [ -f "$NEW_SCRIPT" ]
	then
		_error "File already exists: $NEW_SCRIPT"
		return $E_EXISTS
	fi

	date="$( date +'%Y-%m-%d %H:%M:%S %Z' )"

	sed '1,/^__TEMPLATE__/d' "$SCRIPT_PATH" | \
		sed "
			s/__SCRIPT_NAME__/$new_script_name/g;
			s/__SCRIPT_NAME_SC__/$new_script_name_sc/g;
			s/__DATE__/$date/g;
			s/__MKX_VERSION__/$VERSION/g;
		" \
		> "$NEW_SCRIPT"
}

mkx_version() {
	_echo "$SCRIPT_NAME $VERSION"
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_exit() {
	exit_code=$?
	exit $exit_code
}

_invalid_opt() {
	_error "Invalid option: $opt"
	_echo
	mkx_help
	exit $E_ARGS
}

mkx_main "$@"
exit

__TEMPLATE__
#!/bin/sh
# __SCRIPT_NAME__

# Generated using mkx __MKX_VERSION__: https://github.com/remino/mkx

VERSION='1.0.0'

__SCRIPT_NAME_SC___main() {
	trap _exit INT TERM

	E_ARGS=16

	SCRIPT_INV="$( basename "$0" )"
	SCRIPT_PATH="$( readlink -f "$0" )"
	SCRIPT_NAME="$( basename "$SCRIPT_PATH" )"

	while getopts hv OPT
	do
		case $OPT in
			h) CMD=help ;;
			v) CMD=version ;;
			*) _invalid_opt ;;
		esac
	done

	shift "$(( OPTIND - 1 ))"

	# Comment out the following if you do not want to use commands:
	[ -z "$CMD" ] && CMD="$1"
	[ $# -gt 0 ] && shift

	[ -z "$CMD" ] && CMD="help"
	#[ -z "$CMD" ] && CMD="process"

	case "$CMD" in
		help|process|version) "__SCRIPT_NAME_SC___$CMD" "$@" ;;
		*) _invalid_cmd ;;
	esac

	_exit
}

__SCRIPT_NAME_SC___help() {
cat <<USAGE
$SCRIPT_NAME $VERSION

USAGE: $SCRIPT_INV [<options>] <command> [<args>]

COMMANDS:

	help      Show this help screen.
	version   Show script name and version number.

OPTIONS:

	-h        Show this help screen.
	-v        Show script name and version number.

USAGE
}

__SCRIPT_NAME_SC___process() {
	true
}

__SCRIPT_NAME_SC___version() {
	_echo "$SCRIPT_NAME $VERSION"
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_exit() {
	exit_code=$?
	exit "$exit_code"
}

_fatal() {
	exit_code="$1"
	shift
	_error "$@"
	exit "$exit_code"
}

_invalid_cmd() {
	_error "Invalid command: $CMD"
	_echo
	__SCRIPT_NAME_SC___help
	exit "$E_ARGS"
}

_invalid_opt() {
	_error "Invalid option: $OPT"
	_echo
	__SCRIPT_NAME_SC___help
	exit "$E_ARGS"
}

__SCRIPT_NAME_SC___main "$@"
