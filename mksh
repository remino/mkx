#!/bin/sh
# mksh
# Make new shell script executable file from template.

VERSION='1.0.0'

mksh_main() {
	trap _exit INT TERM

	e_args=16
	e_exists=17
	e_missing_app=18

	_require realpath

	scriptpath="$( realpath "$0" )"
	scriptname="$( basename "$scriptpath" )"
	scriptdir="$( dirname "$scriptpath" )"

	[ $# -lt 1 ] && mksh_help && return 16

	while getopts hv opt
	do
		case $opt in
			h) mksh_help && return ;;
			v) mksh_version && return ;;
			*) _invalid_opt ;;
		esac
	done

	newscript="$1"
	shift

	newscriptname="$( basename "$newscript" )"
	newscriptnamesc="$( echo "$newscriptname" | sed 's/-/_/g' )"

	if [ -f "$newscript" ]
	then
		_error "File already exists: $newscript"
		return $e_exists
	fi

	date="$( date +'%Y-%m-%d %H:%M:%S %Z' )"

	sed '1,/^__TEMPLATE__/d' "$scriptpath" | \
		sed "
			s/__SCRIPTNAME__/$newscriptname/g;
			s/__SCRIPTNAMESC__/$newscriptnamesc/g;
			s/__DATE__/$date/g;
		" \
		> "$newscript"

	chmod a+x "$newscript"
	_echo "$newscript"
	_exit
}

mksh_help() {
cat <<USAGE
Usage: $scriptname scriptfile

Make new shell script executable file from template.

Available options:

	-h        Show this help screen.
	-v        Show script name and version number.

USAGE
}

mksh_version() {
	_echo "$scriptname $VERSION"
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_exit() {
	exit_code=$?
	exit $exit_code
}

_invalid_opt() {
	_error "Invalid option: $opt"
	_echo
	mksh_help
	exit $e_args
}

_require() {
	missing_bin=0

	for bin in "$@"
	do
		if ! which "$bin" > /dev/null 2>&1
		then
			missing_bin=1
			_error "Required: $bin"
		fi
	done

	if [ $missing_bin -ne 0 ]
	then
		_fatal $e_missing_app "One or more executables or apps are missing."
	fi
}

mksh_main "$@"
exit

__TEMPLATE__
#!/bin/sh
# __SCRIPTNAME__
# __DATE__

__SCRIPTNAMESC___main() {
	trap _exit INT TERM

	e_args=16
	e_missing_app=17

	_require realpath

	scriptpath="$( realpath "$0" )"
	scriptname="$( basename "$scriptpath" )"
	scriptdir="$( dirname "$scriptpath" )"

	while getopts h opt
	do
		case $opt in
			h) __SCRIPTNAMESC___help && return ;;
			*) _invalid_opt ;;
		esac
	done

	shift "$(( OPTIND - 1 ))"

	[ -z "$cmd" ] && cmd="$1"
	shift

	[ -z "$cmd" ] && cmd="help"
	#[ -z "$cmd" ] && cmd="process"

	case "$cmd" in
		process) "__SCRIPTNAMESC___$cmd" "$@" ;;
		help|usage) __SCRIPTNAMESC___help ;;
		*) _invalid_cmd ;;
	esac

	_exit
}

__SCRIPTNAMESC___help() {
cat <<USAGE
Usage: $scriptname [options] command

Available commands:

	help      Show this help screen.

Available options:

	-h        Show this help screen.

USAGE
}

__SCRIPTNAMESC___process() {
	true
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_exit() {
	exit_code=$?
	exit $exit_code
}

_fatal() {
	exit_code="$1"
	shift
	_error "$@"
	exit "$exit_code"
}

_invalid_cmd() {
	_error "Invalid command: $cmd"
	_echo
	__SCRIPTNAMESC___help
	exit $e_args
}

_invalid_opt() {
	_error "Invalid option: $opt"
	_echo
	__SCRIPTNAMESC___help
	exit $e_args
}

_require() {
	missing_bin=0

	for bin in "$@"
	do
		if ! which "$bin" > /dev/null 2>&1
		then
			missing_bin=1
			_error "Required: $bin"
		fi
	done

	if [ $missing_bin -ne 0 ]
	then
		_fatal $e_missing_app "One or more executables or apps are missing."
	fi
}

__SCRIPTNAMESC___main "$@"
